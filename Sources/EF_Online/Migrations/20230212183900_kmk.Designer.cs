// <auto-generated />
using EF_Online;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFOnline.Migrations
{
    [DbContext(typeof(RossignolContextOnline))]
    [Migration("20230212183900_kmk")]
    partial class kmk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("ConnectedUserEntityEntryEntity", b =>
                {
                    b.Property<string>("SharedWithUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedWithUid1")
                        .HasColumnType("TEXT");

                    b.HasKey("SharedWithUid", "SharedWithUid1");

                    b.HasIndex("SharedWithUid1");

                    b.ToTable("ConnectedUserEntityEntryEntity");
                });

            modelBuilder.Entity("EF_Model.Entities.EntryEntity", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerUid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.HasIndex("OwnerUid");

                    b.ToTable("EntriesSet");
                });

            modelBuilder.Entity("EF_Model.Entities.LocalUserEntity", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.ToTable("ReferencedUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LocalUserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EF_Model.Entities.ConnectedUserEntity", b =>
                {
                    b.HasBaseType("EF_Model.Entities.LocalUserEntity");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ConnectedUserEntity");
                });

            modelBuilder.Entity("ConnectedUserEntityEntryEntity", b =>
                {
                    b.HasOne("EF_Model.Entities.ConnectedUserEntity", null)
                        .WithMany()
                        .HasForeignKey("SharedWithUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Model.Entities.EntryEntity", null)
                        .WithMany()
                        .HasForeignKey("SharedWithUid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Model.Entities.EntryEntity", b =>
                {
                    b.HasOne("EF_Model.Entities.LocalUserEntity", "Owner")
                        .WithMany("OwnedEntries")
                        .HasForeignKey("OwnerUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EF_Model.Entities.LocalUserEntity", b =>
                {
                    b.Navigation("OwnedEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
